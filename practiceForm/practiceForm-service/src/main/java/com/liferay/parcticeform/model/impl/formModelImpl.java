/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.parcticeform.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.parcticeform.model.form;
import com.liferay.parcticeform.model.formModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the form service. Represents a row in the &quot;practice_form&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>formModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link formImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see formImpl
 * @generated
 */
@JSON(strict = true)
public class formModelImpl extends BaseModelImpl<form> implements formModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form model instance should use the <code>form</code> interface instead.
	 */
	public static final String TABLE_NAME = "practice_form";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"empId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"mobileNo", Types.BIGINT},
		{"email", Types.VARCHAR}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"field4", Types.TIMESTAMP},
		{"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mobileNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table practice_form (uuid_ VARCHAR(75) null,empId LONG not null primary key,groupId LONG,mobileNo LONG,email VARCHAR(75) null,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table practice_form";

	public static final String ORDER_BY_JPQL = " ORDER BY form.empId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY practice_form.empId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public formModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return form.class;
	}

	@Override
	public String getModelClassName() {
		return form.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<form, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<form, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<form, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((form)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<form, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<form, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((form)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<form, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<form, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<form, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<form, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<form, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<form, Object>>();
		Map<String, BiConsumer<form, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<form, ?>>();

		attributeGetterFunctions.put("uuid", form::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<form, String>)form::setUuid);
		attributeGetterFunctions.put("empId", form::getEmpId);
		attributeSetterBiConsumers.put(
			"empId", (BiConsumer<form, Long>)form::setEmpId);
		attributeGetterFunctions.put("groupId", form::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<form, Long>)form::setGroupId);
		attributeGetterFunctions.put("mobileNo", form::getMobileNo);
		attributeSetterBiConsumers.put(
			"mobileNo", (BiConsumer<form, Long>)form::setMobileNo);
		attributeGetterFunctions.put("email", form::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<form, String>)form::setEmail);
		attributeGetterFunctions.put("userName", form::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<form, String>)form::setUserName);
		attributeGetterFunctions.put("createDate", form::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<form, Date>)form::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", form::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<form, Date>)form::setModifiedDate);
		attributeGetterFunctions.put("field1", form::getField1);
		attributeSetterBiConsumers.put(
			"field1", (BiConsumer<form, String>)form::setField1);
		attributeGetterFunctions.put("field2", form::getField2);
		attributeSetterBiConsumers.put(
			"field2", (BiConsumer<form, Boolean>)form::setField2);
		attributeGetterFunctions.put("field3", form::getField3);
		attributeSetterBiConsumers.put(
			"field3", (BiConsumer<form, Integer>)form::setField3);
		attributeGetterFunctions.put("field4", form::getField4);
		attributeSetterBiConsumers.put(
			"field4", (BiConsumer<form, Date>)form::setField4);
		attributeGetterFunctions.put("field5", form::getField5);
		attributeSetterBiConsumers.put(
			"field5", (BiConsumer<form, String>)form::setField5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEmpId() {
		return _empId;
	}

	@Override
	public void setEmpId(long empId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empId = empId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmpId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("empId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getMobileNo() {
		return _mobileNo;
	}

	@Override
	public void setMobileNo(long mobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNo = mobileNo;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, form.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public form toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, form>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		formImpl formImpl = new formImpl();

		formImpl.setUuid(getUuid());
		formImpl.setEmpId(getEmpId());
		formImpl.setGroupId(getGroupId());
		formImpl.setMobileNo(getMobileNo());
		formImpl.setEmail(getEmail());
		formImpl.setUserName(getUserName());
		formImpl.setCreateDate(getCreateDate());
		formImpl.setModifiedDate(getModifiedDate());
		formImpl.setField1(getField1());
		formImpl.setField2(isField2());
		formImpl.setField3(getField3());
		formImpl.setField4(getField4());
		formImpl.setField5(getField5());

		formImpl.resetOriginalValues();

		return formImpl;
	}

	@Override
	public form cloneWithOriginalValues() {
		formImpl formImpl = new formImpl();

		formImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		formImpl.setEmpId(this.<Long>getColumnOriginalValue("empId"));
		formImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		formImpl.setMobileNo(this.<Long>getColumnOriginalValue("mobileNo"));
		formImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		formImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		formImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
		formImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		formImpl.setField1(this.<String>getColumnOriginalValue("field1"));
		formImpl.setField2(this.<Boolean>getColumnOriginalValue("field2"));
		formImpl.setField3(this.<Integer>getColumnOriginalValue("field3"));
		formImpl.setField4(this.<Date>getColumnOriginalValue("field4"));
		formImpl.setField5(this.<String>getColumnOriginalValue("field5"));

		return formImpl;
	}

	@Override
	public int compareTo(form form) {
		int value = 0;

		if (getEmpId() < form.getEmpId()) {
			value = -1;
		}
		else if (getEmpId() > form.getEmpId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof form)) {
			return false;
		}

		form form = (form)object;

		long primaryKey = form.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<form> toCacheModel() {
		formCacheModel formCacheModel = new formCacheModel();

		formCacheModel.uuid = getUuid();

		String uuid = formCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			formCacheModel.uuid = null;
		}

		formCacheModel.empId = getEmpId();

		formCacheModel.groupId = getGroupId();

		formCacheModel.mobileNo = getMobileNo();

		formCacheModel.email = getEmail();

		String email = formCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			formCacheModel.email = null;
		}

		formCacheModel.userName = getUserName();

		String userName = formCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			formCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			formCacheModel.createDate = createDate.getTime();
		}
		else {
			formCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			formCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			formCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		formCacheModel.field1 = getField1();

		String field1 = formCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			formCacheModel.field1 = null;
		}

		formCacheModel.field2 = isField2();

		formCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			formCacheModel.field4 = field4.getTime();
		}
		else {
			formCacheModel.field4 = Long.MIN_VALUE;
		}

		formCacheModel.field5 = getField5();

		String field5 = formCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			formCacheModel.field5 = null;
		}

		return formCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<form, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<form, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<form, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((form)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, form>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					form.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _empId;
	private long _groupId;
	private long _mobileNo;
	private String _email;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<form, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((form)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("empId", _empId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("mobileNo", _mobileNo);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("empId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("mobileNo", 8L);

		columnBitmasks.put("email", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("field1", 256L);

		columnBitmasks.put("field2", 512L);

		columnBitmasks.put("field3", 1024L);

		columnBitmasks.put("field4", 2048L);

		columnBitmasks.put("field5", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private form _escapedModel;

}